{"CVE Code": "CVE-2022-36078", "Description": "Binary provides encoding/decoding in Borsh and other formats. The vulnerability is a memory allocation vulnerability that can be exploited to allocate slices in memory with (arbitrary) excessive size value, which can either exhaust available memory or crash the whole program. When using `github.com/gagliardetto/binary` to parse unchecked (or wrong type of) data from untrusted sources of input (e.g. the blockchain) into slices, it's possible to allocate memory with excessive size. When `dec.Decode(&val)` method is used to parse data into a structure that is or contains slices of values, the length of the slice was previously read directly from the data itself without any checks on the size of it, and then a slice was allocated. This could lead to an overflow and an allocation of memory with excessive size value. Users should upgrade to `v0.7.1` or higher. A workaround is not to rely on the `dec.Decode(&val)` function to parse the data, but to use a custom `UnmarshalWithDecoder()` method that reads and checks the length of any slice.", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2022-36078", "Vulnerability Categories": "Input validation", "Affected Products": "\nBinary Project\u00bbBinary\u00bbForGOVersions  before (<) 0.7.1cpe:2.3:a:binary_project:binary:*:*:*:*:*:go:*:*Matching versions", "EPSS Score": "0.19% Probability of exploitation activity in the next 30 days\n~ 57 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n 1  2024-12-17  0.22%  0.19%  -0.03 \n 2  2024-11-24  0.17%  0.22%  +0.05 \n 3  2024-04-23  0.14%  0.17%  +0.03 \n 4  2024-04-09  0.12%  0.14%  +0.03 \n 5  2024-03-25  0.11%  0.12%  +0.00 \n 6  2024-02-13  0.10%  0.11%  +0.01 \n 7  2023-09-09  0.06%  0.10%  +0.05 \n 8  2023-08-03  0.05%  0.06%  +0.01 \n 9  2023-03-07  0.95%  0.05%  -0.90 ", "CVSS Scores": "7.5", "CWE": [{"CWE_ID": "CWE-400 Uncontrolled Resource Consumption", "CWE_link": "/cwe-details/400/Uncontrolled-Resource-Consumption.html"}, {"CWE_ID": "CWE-789 Memory Allocation with Excessive Size Value", "CWE_link": "/cwe-details/789/Memory-Allocation-with-Excessive-Size-Value.html"}, {"CWE_ID": "CWE-1284 Improper Validation of Specified Quantity in Input", "CWE_link": "/cwe-details/1284/Improper-Validation-of-Specified-Quantity-in-Input.html"}], "Reference": [{"ref_link": "https://github.com/gagliardetto/binary/pull/7", "ref_desc": "Slice: use `reflect.Append` instead of pre-allocating whole slice. by gagliardetto \u00b7 Pull Request #7 \u00b7 gagliardetto/binary \u00b7 GitHubIssue Tracking;Patch;Third Party Advisory", "ref_cve_link": "N/A"}, {"ref_link": "https://github.com/gagliardetto/binary/security/advisories/GHSA-4p6f-m4f9-ch88", "ref_desc": "Slice Memory Allocation with Excessive Size Value in github.com/gagliardetto/binary \u00b7 Advisory \u00b7 gagliardetto/binary \u00b7 GitHubExploit;Mitigation;Third Party Advisory", "ref_cve_link": "N/A"}, {"ref_link": "https://github.com/gagliardetto/binary/releases/tag/v0.7.1", "ref_desc": "Release v0.7.1 \u00b7 gagliardetto/binary \u00b7 GitHubRelease Notes;Third Party Advisory", "ref_cve_link": "N/A"}]}