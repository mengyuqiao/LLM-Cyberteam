{"CVE Code": "CVE-2021-21378", "Description": "Envoy is a cloud-native high-performance edge/middle/service proxy. In Envoy version 1.17.0 an attacker can bypass authentication by presenting a JWT token with an issuer that is not in the provider list when Envoy's JWT Authentication filter is configured with the `allow_missing` requirement under `requires_any` due to a mistake in implementation. Envoy's JWT Authentication filter can be configured with the `allow_missing` requirement that will be satisfied if JWT is missing (JwtMissed error) and fail if JWT is presented or invalid. Due to a mistake in implementation, a JwtUnknownIssuer error was mistakenly converted to JwtMissed when `requires_any` was configured. So if `allow_missing` was configured under `requires_any`, an attacker can bypass authentication by presenting a JWT token with an issuer that is not in the provider list. Integrity may be impacted depending on configuration if the JWT token is used to protect against writes or modifications. This regression was introduced on 2020/11/12 in PR 13839 which fixed handling `allow_missing` under RequiresAny in a JwtRequirement (see issue 13458). The AnyVerifier aggregates the children verifiers' results into a final status where JwtMissing is the default error. However, a JwtUnknownIssuer was mistakenly treated the same as a JwtMissing error and the resulting final aggregation was the default JwtMissing. As a result, `allow_missing` would allow a JWT token with an unknown issuer status. This is fixed in version 1.17.1 by PR 15194. The fix works by preferring JwtUnknownIssuer over a JwtMissing error, fixing the accidental conversion and bypass with `allow_missing`. A user could detect whether a bypass occurred if they have Envoy logs enabled with debug verbosity. Users can enable component level debug logs for JWT. The JWT filter logs will indicate that there is a request with a JWT token and a failure that the JWT token is missing.", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2021-21378", "Vulnerability Categories": "Bypass;Gain privilege", "Affected Products": "\nEnvoyproxy\u00bbEnvoy\u00bbVersion:1.17.0cpe:2.3:a:envoyproxy:envoy:1.17.0:*:*:*:*:*:*:*Matching versions", "EPSS Score": "0.13% Probability of exploitation activity in the next 30 days\n~ 48 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n 1  2023-11-24  0.12%  0.13%  +0.01 \n 2  2023-10-15  0.12%  0.12%  +0.00 \n 3  2023-09-19  0.11%  0.12%  +0.00 \n 4  2023-03-07  0.95%  0.11%  -0.84 ", "CVSS Scores": "6.4", "CWE": [{"CWE_ID": "CWE-287 Improper Authentication", "CWE_link": "/cwe-details/287/Improper-Authentication.html"}, {"CWE_ID": "CWE-303 Incorrect Implementation of Authentication Algorithm", "CWE_link": "/cwe-details/303/Incorrect-Implementation-of-Authentication-Algorithm.html"}], "Reference": [{"ref_link": "https://github.com/envoyproxy/envoy/pull/15194", "ref_desc": "jwt_authn: fix a bug where JWT with wrong issuer is allowed in allow_missing case by qiwzhang \u00b7 Pull Request #15194 \u00b7 envoyproxy/envoy \u00b7 GitHubPatch", "ref_cve_link": "N/A"}, {"ref_link": "https://github.com/envoyproxy/envoy/commit/ea39e3cba652bcc4b11bb0d5c62b017e584d2e5a", "ref_desc": "jwt_authn: fix a bug where JWT with wrong issuer is allowed in allow_\u2026 \u00b7 envoyproxy/envoy@ea39e3c \u00b7 GitHubPatch;Third Party Advisory", "ref_cve_link": "N/A"}, {"ref_link": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-4996-m8hf-hj27", "ref_desc": "JWT authentication bypass with unknown issuer token \u00b7 Advisory \u00b7 envoyproxy/envoy \u00b7 GitHubMitigation;Third Party Advisory", "ref_cve_link": "N/A"}]}