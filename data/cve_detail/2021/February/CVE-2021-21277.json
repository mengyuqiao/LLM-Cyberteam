{"CVE Code": "CVE-2021-21277", "Description": "angular-expressions is \"angular's nicest part extracted as a standalone module for the browser and node\". In angular-expressions before version 1.1.2 there is a vulnerability which allows Remote Code Execution if you call \"expressions.compile(userControlledInput)\" where \"userControlledInput\" is text that comes from user input. The security of the package could be bypassed by using a more complex payload, using a \".constructor.constructor\" technique. In terms of impact: If running angular-expressions in the browser, an attacker could run any browser script when the application code calls expressions.compile(userControlledInput). If running angular-expressions on the server, an attacker could run any Javascript expression, thus gaining Remote Code Execution. This is fixed in version 1.1.2 of angular-expressions A temporary workaround might be either to disable user-controlled input that will be fed into angular-expressions in your application or allow only following characters in the userControlledInput.", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2021-21277", "Vulnerability Categories": "Execute code", "Affected Products": "\nPeerigon\u00bbAngular-expressions\u00bbForNode.jsVersions  before (<) 1.1.2cpe:2.3:a:peerigon:angular-expressions:*:*:*:*:*:node.js:*:*Matching versions", "EPSS Score": "0.65% Probability of exploitation activity in the next 30 days\n~ 79 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n 1  2024-12-17  0.91%  0.65%  -0.27 \n 2  2023-03-07  4.57%  0.91%  -3.66 ", "CVSS Scores": "6.5", "CWE": [{"CWE_ID": "CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')", "CWE_link": "/cwe-details/74/Improper-Neutralization-of-Special-Elements-in-Output-Used-b.html"}, {"CWE_ID": "CWE-94 Improper Control of Generation of Code ('Code Injection')", "CWE_link": "/cwe-details/94/Improper-Control-of-Generation-of-Code-Code-Injection-.html"}], "Reference": [{"ref_link": "https://github.com/peerigon/angular-expressions/commit/07edb62902b1f6127b3dcc013da61c6316dd0bf1", "ref_desc": "Fix Security Vulnerability by using hasOwnProperty defensively \u00b7 peerigon/angular-expressions@07edb62 \u00b7 GitHubPatch;Third Party Advisory", "ref_cve_link": "N/A"}, {"ref_link": "https://www.npmjs.com/package/angular-expressions", "ref_desc": "angular-expressions - npmProduct", "ref_cve_link": "N/A"}, {"ref_link": "https://github.com/peerigon/angular-expressions/security/advisories/GHSA-j6px-jwvv-vpwq", "ref_desc": "Angular Expressions - Remote Code Execution \u00b7 Advisory \u00b7 peerigon/angular-expressions \u00b7 GitHubVendor Advisory", "ref_cve_link": "N/A"}, {"ref_link": "http://blog.angularjs.org/2016/09/angular-16-expression-sandbox-removal.html", "ref_desc": "AngularJS: Angular 1.6 - Expression Sandbox RemovalBroken Link;Vendor AdvisoryCVEs referencing this url", "ref_cve_link": "https://www.cvedetails.com/reference-url-info/yLo0cptp_Ya29wKbotH4NaKORkk.html"}]}