{"CVE Code": "CVE-2024-36943", "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\n\nmake_uffd_wp_pte() was previously doing:\n\n  pte = ptep_get(ptep);\n  ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);\n\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\n\n  pte = ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2024-36943", "Vulnerability Categories": "N/A", "Affected Products": "N/A", "EPSS Score": "0.04% Probability of exploitation activity in the next 30 days\n~ 9 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n Could not find any EPSS score change records for this CVE ", "CVSS Scores": "N/A", "CWE": [], "Reference": [{"ref_link": "https://git.kernel.org/stable/c/74b3d66f91d9f539f99faad74d796fa9a389a015", "ref_desc": "fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan - kernel/git/stable/linux.git - Linux kernel stable tree", "ref_cve_link": "N/A"}, {"ref_link": "https://git.kernel.org/stable/c/c70dce4982ce1718bf978a35f8e26160b82081f4", "ref_desc": "fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan - kernel/git/stable/linux.git - Linux kernel stable tree", "ref_cve_link": "N/A"}]}