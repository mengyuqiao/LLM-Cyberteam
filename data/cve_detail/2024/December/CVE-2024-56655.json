{"CVE Code": "CVE-2024-56655", "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfilter: nf_tables: do not defer rule destruction via call_rcu\n\nnf_tables_chain_destroy can sleep, it can't be used from call_rcu\ncallbacks.\n\nMoreover, nf_tables_rule_release() is only safe for error unwinding,\nwhile transaction mutex is held and the to-be-desroyed rule was not\nexposed to either dataplane or dumps, as it deactives+frees without\nthe required synchronize_rcu() in-between.\n\nnft_rule_expr_deactivate() callbacks will change ->use counters\nof other chains/sets, see e.g. nft_lookup .deactivate callback, these\nmust be serialized via transaction mutex.\n\nAlso add a few lockdep asserts to make this more explicit.\n\nCalling synchronize_rcu() isn't ideal, but fixing this without is hard\nand way more intrusive.  As-is, we can get:\n\nWARNING: .. net/netfilter/nf_tables_api.c:5515 nft_set_destroy+0x..\nWorkqueue: events nf_tables_trans_destroy_work\nRIP: 0010:nft_set_destroy+0x3fe/0x5c0\nCall Trace:\n <TASK>\n nf_tables_trans_destroy_work+0x6b7/0xad0\n process_one_work+0x64a/0xce0\n worker_thread+0x613/0x10d0\n\nIn case the synchronize_rcu becomes an issue, we can explore alternatives.\n\nOne way would be to allocate nft_trans_rule objects + one nft_trans_chain\nobject, deactivate the rules + the chain and then defer the freeing to the\nnft destroy workqueue.  We'd still need to keep the synchronize_rcu path as\na fallback to handle -ENOMEM corner cases though.", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2024-56655", "Vulnerability Categories": "N/A", "Affected Products": "N/A", "EPSS Score": "0.05% Probability of exploitation activity in the next 30 days\n~ 17 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n Could not find any EPSS score change records for this CVE ", "CVSS Scores": "N/A", "CWE": [], "Reference": [{"ref_link": "https://git.kernel.org/stable/c/27f0574253f6c24c8ee4e3f0a685b75ed3a256ed", "ref_desc": "netfilter: nf_tables: do not defer rule destruction via call_rcu - kernel/git/stable/linux.git - Linux kernel stable tree", "ref_cve_link": "N/A"}, {"ref_link": "https://git.kernel.org/stable/c/b04df3da1b5c6f6dc7cdccc37941740c078c4043", "ref_desc": "netfilter: nf_tables: do not defer rule destruction via call_rcu - kernel/git/stable/linux.git - Linux kernel stable tree", "ref_cve_link": "N/A"}, {"ref_link": "https://git.kernel.org/stable/c/7cf0bd232b565d9852cb25fd094f77254773e048", "ref_desc": "netfilter: nf_tables: do not defer rule destruction via call_rcu - kernel/git/stable/linux.git - Linux kernel stable tree", "ref_cve_link": "N/A"}]}