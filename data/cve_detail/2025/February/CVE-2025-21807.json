{"CVE Code": "CVE-2025-21807", "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nblock: fix queue freeze vs limits lock order in sysfs store methods\n\nqueue_attr_store() always freezes a device queue before calling the\nattribute store operation. For attributes that control queue limits, the\nstore operation will also lock the queue limits with a call to\nqueue_limits_start_update(). However, some drivers (e.g. SCSI sd) may\nneed to issue commands to a device to obtain limit values from the\nhardware with the queue limits locked. This creates a potential ABBA\ndeadlock situation if a user attempts to modify a limit (thus freezing\nthe device queue) while the device driver starts a revalidation of the\ndevice queue limits.\n\nAvoid such deadlock by not freezing the queue before calling the\n->store_limit() method in struct queue_sysfs_entry and instead use the\nqueue_limits_commit_update_frozen helper to freeze the queue after taking\nthe limits lock.\n\nThis also removes taking the sysfs lock for the store_limit method as\nit doesn't protect anything here, but creates even more nesting.\nHopefully it will go away from the actual sysfs methods entirely soon.\n\n(commit log adapted from a similar patch from  Damien Le Moal)", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2025-21807", "Vulnerability Categories": "N/A", "Affected Products": "N/A", "EPSS Score": "0.02% Probability of exploitation activity in the next 30 days\n~ 4 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n 1  2025-03-17  0.04%  0.02%  -0.02 ", "CVSS Scores": "N/A", "CWE": [], "Reference": [{"ref_link": "https://git.kernel.org/stable/c/8985da5481562e96b95e94ed8e5cc9b6565eb82b", "ref_desc": "block: fix queue freeze vs limits lock order in sysfs store methods - kernel/git/stable/linux.git - Linux kernel stable tree", "ref_cve_link": "N/A"}, {"ref_link": "https://git.kernel.org/stable/c/c99f66e4084a62a2cc401c4704a84328aeddc9ec", "ref_desc": "", "ref_cve_link": "N/A"}]}