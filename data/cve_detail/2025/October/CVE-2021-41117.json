{"CVE Code": "CVE-2021-41117", "Description": "keypair is a a RSA PEM key generator written in javascript. keypair implements a lot of cryptographic primitives on its own or by borrowing from other libraries where possible, including node-forge. An issue was discovered where this library was generating identical RSA keys used in SSH. This would mean that the library is generating identical P, Q (and thus N) values which, in practical terms, is impossible with RSA-2048 keys. Generating identical values, repeatedly, usually indicates an issue with poor random number generation, or, poor handling of CSPRNG output. Issue 1: Poor random number generation (`GHSL-2021-1012`). The library does not rely entirely on a platform provided CSPRNG, rather, it uses it's own counter-based CMAC approach. Where things go wrong is seeding the CMAC implementation with \"true\" random data in the function `defaultSeedFile`. In order to seed the AES-CMAC generator, the library will take two different approaches depending on the JavaScript execution environment. In a browser, the library will use [`window.crypto.getRandomValues()`](https://github.com/juliangruber/keypair/blob/87c62f255baa12c1ec4f98a91600f82af80be6db/index.js#L971). However, in a nodeJS execution environment, the `window` object is not defined, so it goes down a much less secure solution, also of which has a bug in it. It does look like the library tries to use node's CSPRNG when possible unfortunately, it looks like the `crypto` object is null because a variable was declared with the same name, and set to `null`. So the node CSPRNG path is never taken. However, when `window.crypto.getRandomValues()` is not available, a Lehmer LCG random number generator is used to seed the CMAC counter, and the LCG is seeded with `Math.random`. While this is poor and would likely qualify in a security bug in itself, it does not explain the extreme frequency in which duplicate keys occur. The main flaw: The output from the Lehmer LCG is encoded incorrectly. The specific [line][https://github.com/juliangruber/keypair/blob/87c62f255baa12c1ec4f98a91600f82af80be6db/index.js#L1008] with the flaw is: `b.putByte(String.fromCharCode(next & 0xFF))` The [definition](https://github.com/juliangruber/keypair/blob/87c62f255baa12c1ec4f98a91600f82af80be6db/index.js#L350-L352) of `putByte` is `util.ByteBuffer.prototype.putByte = function(b) {this.data += String.fromCharCode(b);};`. Simplified, this is `String.fromCharCode(String.fromCharCode(next & 0xFF))`. The double `String.fromCharCode` is almost certainly unintentional and the source of weak seeding. Unfortunately, this does not result in an error. Rather, it results most of the buffer containing zeros. Since we are masking with 0xFF, we can determine that 97% of the output from the LCG are converted to zeros. The only outputs that result in meaningful values are outputs 48 through 57, inclusive. The impact is that each byte in the RNG seed has a 97% chance of being 0 due to incorrect conversion. When it is not, the bytes are 0 through 9. In summary, there are three immediate concerns: 1. The library has an insecure random number fallback path. Ideally the library would require a strong CSPRNG instead of attempting to use a LCG and `Math.random`. 2. The library does not correctly use a strong random number generator when run in NodeJS, even though a strong CSPRNG is available. 3. The fallback path has an issue in the implementation where a majority of the seed data is going to effectively be zero. Due to the poor random number generation, keypair generates RSA keys that are relatively easy to guess. This could enable an attacker to decrypt confidential messages or gain authorized access to an account belonging to the victim.", "NVD Link": "https://nvd.nist.gov/vuln/detail/CVE-2021-41117", "Vulnerability Categories": "N/A", "Affected Products": "\nKeypair Project\u00bbKeypairVersions  before (<) 1.0.4cpe:2.3:a:keypair_project:keypair:*:*:*:*:*:*:*:*Matching versions", "EPSS Score": "1.05% Probability of exploitation activity in the next 30 days\n~ 76 % Percentile, the proportion of vulnerabilities that are scored at or less", "EPSS History": "\n #  Date  Old EPSS Score  New EPSS Score  Delta (New - Old) \n 1  2025-06-04  1.11%  1.05%  -0.07 \n 2  2025-06-01  1.05%  1.11%  +0.07 \n 3  2025-05-04  1.11%  1.05%  -0.07 \n 4  2025-05-02  0.55%  1.11%  +0.57 \n 5  2025-05-01  0.44%  0.55%  +0.11 \n 6  2025-04-27  0.55%  0.44%  -0.12 \n 7  2025-04-07  0.50%  0.55%  +0.06 \n 8  2025-04-05  0.52%  0.50%  -0.02 \n 9  2025-04-04  0.50%  0.52%  +0.02 \n 10  2025-04-03  0.52%  0.50%  -0.02 \n 11  2025-04-02  0.50%  0.52%  +0.02 \n 12  2025-03-30  1.95%  0.50%  -1.45 \n 13  2025-03-29  0.50%  1.95%  +1.45 \n 14  2025-03-28  1.95%  0.50%  -1.45 \n 15  2025-03-27  0.50%  1.95%  +1.45 \n 16  2025-03-20  0.39%  0.50%  +0.11 \n 17  2025-03-17  0.47%  0.39%  -0.07 \n 18  2025-02-28  0.48%  0.47%  -0.01 \n 19  2025-02-13  0.47%  0.48%  +0.01 \n 20  2024-12-17  0.34%  0.47%  +0.13 \n 21  2024-09-16  0.32%  0.34%  +0.02 \n 22  2024-09-02  0.33%  0.32%  -0.01 \n 23  2024-06-26  0.31%  0.33%  +0.02 \n 24  2024-05-17  0.26%  0.31%  +0.05 \n 25  2023-05-04  0.26%  0.26%  +0.00 \n 26  2023-03-24  0.24%  0.26%  +0.02 \n 27  2023-03-07  19.46%  0.24%  -19.22 ", "CVSS Scores": "6.4", "CWE": [{"CWE_ID": "CWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)", "CWE_link": "/cwe-details/335/Incorrect-Usage-of-Seeds-in-Pseudo-Random-Number-Generator-.html"}], "Reference": [{"ref_link": "https://github.com/juliangruber/keypair/security/advisories/GHSA-3f99-hvg4-qjwj", "ref_desc": "Insecure random number generation \u00b7 Advisory \u00b7 juliangruber/keypair \u00b7 GitHubExploit;Patch;Third Party Advisory", "ref_cve_link": "N/A"}, {"ref_link": "https://securitylab.github.com/advisories/GHSL-2021-1012-keypair/", "ref_desc": "GHSL-2021-1012: Poor random number generation in keypair - CVE-2021-41117 | GitHub Security LabExploit;Third Party Advisory", "ref_cve_link": "N/A"}]}